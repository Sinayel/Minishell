main.c:66:12: style: The scope of the variable 'export' can be reduced. [variableScope]
 t_export *export;
           ^
srcs/parsing/token/id_token.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
srcs/parsing/token/id_token.c:15:37: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
char *extract_separator_token(char *str, int *i)
                                    ^
srcs/parsing/token/id_token.c:29:21: style: Parameter 'line' can be declared as pointer to const [constParameterPointer]
int openquote(char *line)
                    ^
srcs/parsing/token/id_token.c:51:27: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
char *extract_token(char *str, int *i)
                          ^
srcs/parsing/token/id_token.c:82:11: style: Variable 'last' can be declared as pointer to const [constVariablePointer]
 t_token *last;
          ^
srcs/parsing/token/return_quoted_value.c:15:48: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
void skip_and_initialize_tmp(char **tmp, char *str, int *i, int len)
                                               ^
srcs/parsing/token/return_quoted_value.c:23:46: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
void extract_quoted_content(char *tmp, char *str, int *i, char quote)
                                             ^
srcs/parsing/token/check_tokenization.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
srcs/parsing/check.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
srcs/parsing/check.c:15:31: style: Parameter 'tmp' can be declared as pointer to const [constParameterPointer]
int return_next_next(t_token *tmp)
                              ^
srcs/parsing/check.c:30:36: style: Parameter 'tmp' can be declared as pointer to const [constParameterPointer]
int for_trunc_and_heredoc(t_token *tmp)
                                   ^
srcs/parsing/path.c:28:6: style: Condition 'tmp' is always true [knownConditionTrueFalse]
 if (tmp)
     ^
srcs/parsing/path.c:40:6: style: Condition 'path_breaker' is always true [knownConditionTrueFalse]
 if (path_breaker)
     ^
srcs/parsing/path.c:82:34: style: Same expression on both sides of '|'. [duplicateExpression]
   is_if_ok = access(input, X_OK | X_OK | X_OK);
                                 ^
srcs/parsing/path.c:83:30: style: Same expression on both sides of '|'. [duplicateExpression]
   is_ok = access(word, X_OK | X_OK | X_OK);
                             ^
srcs/parsing/path.c:70:8: style: The scope of the variable 'word' can be reduced. [variableScope]
 char *word;
       ^
srcs/parsing/path.c:72:7: style: The scope of the variable 'is_ok' can be reduced. [variableScope]
 int  is_ok;
      ^
srcs/parsing/path.c:73:7: style: The scope of the variable 'is_if_ok' can be reduced. [variableScope]
 int  is_if_ok;
      ^
srcs/parsing/path.c:45:24: style: Parameter 'token' can be declared as pointer to const [constParameterPointer]
void errno_check(char *token)
                       ^
srcs/parsing/path.c:68:41: style: Parameter 'tmp' can be declared as pointer to const [constParameterPointer]
int double_check(t_path *path, t_token *tmp, char *input)
                                        ^
srcs/utils/utils.c:30:21: style: Parameter 's1' can be declared as pointer to const [constParameterPointer]
int ft_strcmp(char *s1, char *s2)
                    ^
srcs/utils/utils.c:30:31: style: Parameter 's2' can be declared as pointer to const [constParameterPointer]
int ft_strcmp(char *s1, char *s2)
                              ^
srcs/utils/free.c:60:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 path = NULL;
 ^
srcs/utils/utils_dollar.c:39:29: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
void env_return_value(char *str, t_dollar *var, t_env *env, char *tmp)
                            ^
srcs/utils/utils_dollar.c:61:25: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
void return_quote(char *str, t_dollar *var)
                        ^
srcs/utils/utils_token.c:39:24: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
void skip_spaces(char *str, int *i)
                       ^
srcs/utils/utils_token2.c:15:21: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
int while_str(char *str, int i)
                    ^
srcs/utils/ft_exit_utils.c:49:8: style: The scope of the variable 'arg' can be reduced. [variableScope]
 char *arg;
       ^
srcs/utils/ft_exit_utils.c:15:40: style: Parameter 'list' can be declared as pointer to const [constParameterPointer]
int handle_too_many_arguments(t_token *list, t_data *data)
                                       ^
srcs/utils/ft_exit_utils.c:26:35: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
int handle_invalid_argument(char *arg, t_token *list, t_env *env, t_path *path)
                                  ^
srcs/utils/ft_split.c:22:10: warning: Either the condition '!s' is redundant or there is possible null pointer dereference: str. [nullPointerRedundantCheck]
 while (*str)
         ^
srcs/utils/ft_split.c:57:6: note: Assuming that condition '!s' is not redundant
 if (!s || !split)
     ^
srcs/utils/ft_split.c:56:30: note: Calling function 'count_words', 1st argument 's' value is 0
 split = malloc((count_words(s, c) + 1) * sizeof(char *));
                             ^
srcs/utils/ft_split.c:22:10: note: Null pointer dereference
 while (*str)
         ^
srcs/utils/ft_strtol.c:56:8: style: The scope of the variable 'digit' can be reduced. [variableScope]
 int   digit;
       ^
srcs/error/msg.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
srcs/builtins/env/create_env.c:16:29: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
t_env *create_env_var(char *name, char *value)
                            ^
srcs/builtins/env/create_env.c:16:41: style: Parameter 'value' can be declared as pointer to const [constParameterPointer]
t_env *create_env_var(char *name, char *value)
                                        ^
srcs/builtins/echo/echo.c:28:6: warning: Either the condition 'tmp' is redundant or there is possible null pointer dereference: tmp. [nullPointerRedundantCheck]
 if (tmp->next)
     ^
srcs/builtins/echo/echo.c:22:9: note: Assuming that condition 'tmp' is not redundant
 while (tmp)
        ^
srcs/builtins/echo/echo.c:28:6: note: Null pointer dereference
 if (tmp->next)
     ^
srcs/builtins/pwd/pwd.c:25:13: style: Condition 'arg[0]=='-'' is always true [knownConditionTrueFalse]
 if (arg[0] == '-' && arg[1] == '-')
            ^
srcs/builtins/pwd/pwd.c:20:65: note: Assuming that condition 'arg[0]!='-'' is not redundant
 if (arg == NULL || (arg[0] == '-' && arg[1] == '\0') || arg[0] != '-')
                                                                ^
srcs/builtins/pwd/pwd.c:25:13: note: Condition 'arg[0]=='-'' is always true
 if (arg[0] == '-' && arg[1] == '-')
            ^
srcs/builtins/pwd/pwd.c:30:13: style: Condition 'arg[0]=='-'' is always true [knownConditionTrueFalse]
 if (arg[0] == '-' && arg[1] != '\0')
            ^
srcs/builtins/pwd/pwd.c:20:65: note: Assuming that condition 'arg[0]!='-'' is not redundant
 if (arg == NULL || (arg[0] == '-' && arg[1] == '\0') || arg[0] != '-')
                                                                ^
srcs/builtins/pwd/pwd.c:25:20: note: Assuming condition is false
 if (arg[0] == '-' && arg[1] == '-')
                   ^
srcs/builtins/pwd/pwd.c:30:13: note: Condition 'arg[0]=='-'' is always true
 if (arg[0] == '-' && arg[1] != '\0')
            ^
srcs/builtins/pwd/pwd.c:15:18: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
int ft_pwd(char *arg)
                 ^
srcs/builtins/cd/pwd_option.c:22:9: warning: Either the condition 'str' is redundant or there is possible null pointer dereference: str. [nullPointerRedundantCheck]
 while (str[i])
        ^
srcs/builtins/cd/pwd_option.c:26:7: note: Assuming that condition 'str' is not redundant
  if (str && str[i] != '\0')
      ^
srcs/builtins/cd/pwd_option.c:22:9: note: Null pointer dereference
 while (str[i])
        ^
srcs/builtins/cd/pwd_option.c:24:10: warning: Either the condition 'str' is redundant or there is possible null pointer dereference: str. [nullPointerRedundantCheck]
  while (str[i] && (str[i] == ' ' || str[i] == '\n' || str[i] == '\t'))
         ^
srcs/builtins/cd/pwd_option.c:26:7: note: Assuming that condition 'str' is not redundant
  if (str && str[i] != '\0')
      ^
srcs/builtins/cd/pwd_option.c:24:10: note: Null pointer dereference
  while (str[i] && (str[i] == ' ' || str[i] == '\n' || str[i] == '\t'))
         ^
srcs/builtins/cd/pwd_option.c:28:10: warning: Either the condition 'str' is redundant or there is possible null pointer dereference: str. [nullPointerRedundantCheck]
  while (str[i] && (str[i] != ' ' && str[i] != '\n' && str[i] != '\t'))
         ^
srcs/builtins/cd/pwd_option.c:26:7: note: Assuming that condition 'str' is not redundant
  if (str && str[i] != '\0')
      ^
srcs/builtins/cd/pwd_option.c:28:10: note: Null pointer dereference
  while (str[i] && (str[i] != ' ' && str[i] != '\n' && str[i] != '\t'))
         ^
srcs/builtins/cd/pwd_option.c:15:20: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
int cmb_word(char *str)
                   ^
srcs/builtins/cd/pwd_option.c:62:9: style: Variable 'oldpwd' can be declared as pointer to const [constVariablePointer]
 char  *oldpwd;
        ^
srcs/builtins/cd/option_cd.c:15:47: style: Parameter 'input' can be declared as pointer to const [constParameterPointer]
char *cd_handle_dollar(t_env *env_list, char *input)
                                              ^
srcs/builtins/cd/option_cd.c:32:23: style: Parameter 'path' can be declared as pointer to const [constParameterPointer]
int no_home_set(char *path, t_data *data)
                      ^
srcs/builtins/cd/option_cd.c:69:22: style: Parameter 'input' can be declared as pointer to const [constParameterPointer]
int bad_option(char *input, t_data *data)
                     ^
srcs/builtins/cd/option_cd.c:86:26: style: Parameter 'input' can be declared as pointer to const [constParameterPointer]
int option_for_cd_(char *input, t_data *data, t_env *env_list, char *path)
                         ^
srcs/builtins/cd/option_cd.c:86:70: style: Parameter 'path' can be declared as pointer to const [constParameterPointer]
int option_for_cd_(char *input, t_data *data, t_env *env_list, char *path)
                                                                     ^
srcs/builtins/unset/unset.c:16:28: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
int len_before_space(char *arg)
                           ^
srcs/builtins/unset/utils_unset.c:15:30: style: Parameter 'export' can be declared as pointer to const [constParameterPointer]
char **malloc_dest(t_export *export, char **dest)
                             ^
srcs/builtins/export/print_export.c:63:26: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
int contains_equal(char *arg)
                         ^
srcs/builtins/export/replace_env.c:20:7: warning: Either the condition 'env_list==NULL' is redundant or there is possible null pointer dereference: env_list. [nullPointerRedundantCheck]
 if (*env_list == NULL || env_list == NULL)
      ^
srcs/builtins/export/replace_env.c:20:36: note: Assuming that condition 'env_list==NULL' is not redundant
 if (*env_list == NULL || env_list == NULL)
                                   ^
srcs/builtins/export/replace_env.c:20:7: note: Null pointer dereference
 if (*env_list == NULL || env_list == NULL)
      ^
srcs/builtins/export/replace_env.c:39:7: warning: Either the condition 'env_list==NULL' is redundant or there is possible null pointer dereference: env_list. [nullPointerRedundantCheck]
 if (*env_list == NULL || env_list == NULL)
      ^
srcs/builtins/export/replace_env.c:39:36: note: Assuming that condition 'env_list==NULL' is not redundant
 if (*env_list == NULL || env_list == NULL)
                                   ^
srcs/builtins/export/replace_env.c:39:7: note: Null pointer dereference
 if (*env_list == NULL || env_list == NULL)
      ^
srcs/builtins/export/replace_env.c:16:63: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
void replace_env_value_ez(t_env **env_list, char *name, char *arg)
                                                              ^
srcs/builtins/export/replace_env.c:70:30: style: Parameter 'str1' can be declared as pointer to const [constParameterPointer]
char *ft_magouilles_v2(char *str1, char *str2, char *str3)
                             ^
srcs/builtins/export/replace_env.c:70:42: style: Parameter 'str2' can be declared as pointer to const [constParameterPointer]
char *ft_magouilles_v2(char *str1, char *str2, char *str3)
                                         ^
srcs/builtins/export/replace_env.c:70:54: style: Parameter 'str3' can be declared as pointer to const [constParameterPointer]
char *ft_magouilles_v2(char *str1, char *str2, char *str3)
                                                     ^
srcs/builtins/export/replace_env.c:80:35: style: Parameter 'src' can be declared as pointer to const [constParameterPointer]
int copy_string(char *dest, char *src, int v)
                                  ^
srcs/builtins/export/big_export.c:15:51: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
char **replace_one_in_export(char **export, char *arg)
                                                  ^
srcs/builtins/export/big_export.c:45:64: style: Parameter 'env_value' can be declared as pointer to const [constParameterPointer]
int should_append_to_export(t_export *export, char *arg, char *env_value)
                                                               ^
srcs/builtins/export/big_export.c:60:4: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
 j = 0;
   ^
srcs/builtins/export/big_big_export.c:42:9: style: The scope of the variable 'split_arg' can be reduced. [variableScope]
 char **split_arg;
        ^
srcs/builtins/export/big_big_export.c:57:52: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
void handle_invalid_identifier(t_data *data, char *arg)
                                                   ^
srcs/builtins/export/big_big_export.c:22:4: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
 j = 0;
   ^
srcs/builtins/export/copy_to_export.c:39:38: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
char **add_to_env(char **temp, char *arg, int current_size)
                                     ^
srcs/builtins/export/copy_to_export.c:100:30: style: Parameter 'env_entry' can be declared as pointer to const [constParameterPointer]
void print_export_line(char *env_entry)
                             ^
srcs/builtins/export/env_to_export.c:56:27: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
int check_equal_arg(char *arg)
                          ^
srcs/builtins/export/env_to_export.c:74:48: style: Parameter 'split_arg' can be declared as pointer to const [constParameterPointer]
char **replace_export(char **env_export, char *split_arg)
                                               ^
srcs/builtins/export/export_create.c:16:29: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
t_env *create_new_env(char *name)
                            ^
srcs/builtins/export/export_create.c:76:29: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
int is_env_name_valid(char *name)
                            ^
srcs/error/ft_exit.c:32:64: warning: Uninitialized variable: path [uninitvar]
  if (tmp->type == CMD && for_check_exit(tmp->token, tmp, env, path) == 2
                                                               ^
srcs/error/ft_exit.c:27:9: note: Assuming condition is false
 if (env->next)
        ^
srcs/error/ft_exit.c:32:64: note: Uninitialized variable: path
  if (tmp->type == CMD && for_check_exit(tmp->token, tmp, env, path) == 2
                                                               ^
srcs/parsing/dollar/pid.c:15:30: style: Parameter 'pid' can be declared as pointer to const [constParameterPointer]
char *pid_len(int len, char *pid, char *str)
                             ^
srcs/parsing/dollar/pid.c:15:41: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
char *pid_len(int len, char *pid, char *str)
                                        ^
srcs/parsing/dollar/pid.c:35:33: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
char *return_quoted_value(char *str, char *tmp, int *j, int *i)
                                ^
srcs/parsing/dollar/dollar.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
srcs/parsing/dollar/dollar.c:21:23: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
int len_for_tmp(char *str)
                      ^
srcs/parsing/dollar/len_dollar.c:39:9: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
  char *str)
        ^
srcs/parsing/dollar/code_error.c:17:7: style: Local variable 'pid_len' shadows outer function [shadowFunction]
 int  pid_len;
      ^
includes/minishell.h:126:10: note: Shadowed declaration
char    *pid_len(int len, char *pid, char *str);
         ^
srcs/parsing/dollar/code_error.c:17:7: note: Shadow variable
 int  pid_len;
      ^
srcs/parsing/dollar/code_error.c:15:31: style: Parameter 'pid' can be declared as pointer to const [constParameterPointer]
char *code_len(int len, char *pid, char *str)
                              ^
srcs/parsing/dollar/code_error.c:15:42: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
char *code_len(int len, char *pid, char *str)
                                         ^
srcs/parsing/dollar/code_error.c:35:39: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
char *return_quoted_value_error(char *str, char *tmp, int *j, int *i)
                                      ^
srcs/parsing/dollar/code_error.c:85:10: style: Variable 'data' can be declared as pointer to const [constVariablePointer]
 t_data *data;
         ^
srcs/utils/ft_split.c:22:10: warning: Null pointer dereference: str [ctunullpointer]
 while (*str)
         ^
srcs/utils/ft_split.c:57:6: note: Assuming that condition '!s' is not redundant
 if (!s || !split)
     ^
srcs/utils/ft_split.c:56:29: note: Calling function count_words, 1st argument is null
 split = malloc((count_words(s, c) + 1) * sizeof(char *));
                            ^
srcs/utils/ft_split.c:22:10: note: Dereferencing argument str that is null
 while (*str)
         ^
srcs/builtins/cd/option_cd.c:15:0: style: The function 'cd_handle_dollar' is never used. [unusedFunction]
char *cd_handle_dollar(t_env *env_list, char *input)
^
srcs/parsing/check.c:50:0: style: The function 'check_quote' is never used. [unusedFunction]
char *check_quote(t_token *tmp, int *i, int *j)
^
srcs/parsing/dollar/pid.c:55:0: style: The function 'get_pid' is never used. [unusedFunction]
char *get_pid(int len, char *str, char *pid)
^
srcs/parsing/path.c:45:0: style: The function 'errno_check' is never used. [unusedFunction]
void errno_check(char *token)
^
